FROM mediawiki:1.43
ENV DEBIAN_FRONTEND=noninteractive

ENV MW_INSTALL_EXTENSIONS="Lockdown Description2 RelatedArticles MobileFrontend CirrusSearch Elastica"
ENV MW_INSTALL_SKINS=""
ENV MW_EXTRA_EXTENSIONS="${MW_INSTALL_EXTENSIONS} RottenLinks WikiCategoryTagCloud CookieConsent"
ENV MW_EXTRA_SKINS="${MW_INSTALL_SKINS}"

COPY resources/mediawiki/mediawiki-rewrites.conf /etc/apache2/conf-available/mediawiki-rewrites.conf
COPY resources/mediawiki/memcachephp-proxy.conf /etc/apache2/conf-available/memcachephp-proxy.conf
COPY --chown=www-data:www-data resources/favicon /var/www/html/favicon/

RUN apt-get update \
  && apt-get install -y --no-install-recommends \
  unzip \
  && apt-get clean \
  && rm -rf /var/lib/apt/lists/* \
  && a2enmod headers proxy proxy_http \
  && a2enconf mediawiki-rewrites memcachephp-proxy

RUN set -eux; \
  BR="${MW_BRANCH:-REL${MEDIAWIKI_MAJOR_VERSION%%.*}_${MEDIAWIKI_MAJOR_VERSION#*.}}"; \
  echo "Using MW_BRANCH=$BR"; \
  FALLBACK_BRANCH="main"; \
  clone_with_fallback() { \
    url="$1"; dest="$2"; pref="${3:-$BR}"; fb="${4:-$FALLBACK_BRANCH}"; \
    branch="$pref"; \
    if git ls-remote --exit-code --heads "$url" "$branch" >/dev/null 2>&1; then \
      echo "✅ $url: using branch $branch"; \
    elif git ls-remote --exit-code --heads "$url" "$fb" >/dev/null 2>&1; then \
      echo "⚠️  $url: branch $branch missing, falling back to $fb"; \
      branch="$fb"; \
    else \
      echo "⚠️  $url: neither $branch nor $fb found, cloning default HEAD"; \
      branch=""; \
    fi; \
    rm -rf "$dest"; \
    if [ -n "$branch" ]; then \
      git clone --depth=1 --single-branch -b "$branch" "$url" "$dest"; \
    else \
      git clone --depth=1 "$url" "$dest"; \
    fi; \
  }; \
  # fixed commit when cloning from master
  clone_fixed_commit() { \
    url="$1"; dest="$2"; commit="$3"; branch="${4:-}"; \
    echo "→ target: $url @ $commit  (branch hint: ${branch:-<none>})"; \
    rm -rf "$dest"; \
    git init "$dest"; cd "$dest"; \
    git remote add origin "$url"; \
    # 1) Attempts: fetch direct commit shallow (works if server allows it)
    if git fetch --depth=1 origin "$commit" >/dev/null 2>&1; then \
      echo "✓ fetched exact commit (shallow)"; \
    else \
      echo "… direct by-commit fetch blocked; fetching branch history"; \
      [ -n "$branch" ] || { echo "ERROR: need a branch name as 4th arg"; exit 1; }; \
      # First shallow; if commit is older → unshallow
      git fetch --depth=200 origin "$branch" || { echo "ERROR: cannot fetch branch $branch"; exit 1; }; \
      if ! git cat-file -e "$commit^{commit}" >/dev/null 2>&1; then \
        echo "… commit not in shallow history; unshallowing $branch"; \
        git fetch --unshallow origin "$branch" || git fetch --depth=2147483647 origin "$branch"; \
      fi; \
      # Commit now available?
      git cat-file -e "$commit^{commit}" >/dev/null 2>&1 || { \
        echo "ERROR: commit $commit not found in branch $branch"; exit 1; \
      }; \
      # Optional: check whether commit is really an ancestor of the branch HEAD
      if git rev-parse -q --verify "origin/$branch" >/dev/null 2>&1; then \
        if ! git merge-base --is-ancestor "$commit" "origin/$branch"; then \
          echo "⚠️  commit is not an ancestor of origin/$branch (continuing anyway)"; \
        fi; \
      fi; \
    fi; \
    # 2) Checkout exakt dieses Commits (detached HEAD)
    git checkout --detach -q "$commit"; \
    # Clean up (Source only, no .git required)
    git reset --hard -q; git clean -fdx -q; \
    echo "✓ checked out $commit into $dest"; \
  }; \
  # Extensions
  for ext in $MW_INSTALL_EXTENSIONS; do \
    url="https://gerrit.wikimedia.org/r/mediawiki/extensions/$ext"; \
    clone_with_fallback "$url" "/var/www/html/extensions/$ext"; \
  done; \
  # Skins
  for skin in $MW_INSTALL_SKINS; do \
    url="https://gerrit.wikimedia.org/r/mediawiki/skins/$skin"; \
    clone_with_fallback "$url" "/var/www/html/skins/$skin"; \
  done; \
  # Special Stuff
  BRANCH="master"; \
  COMMIT="335edadddb7a438e0e4698e9103d5efd4c46f9d8" ; \
  clone_fixed_commit "https://gerrit.wikimedia.org/r/mediawiki/extensions/WikiCategoryTagCloud" \
                     "/var/www/html/extensions/WikiCategoryTagCloud" \
                     "$COMMIT" "$BRANCH"; \
  BRANCH="master"; \
  COMMIT="e02209dddb79a5f8fc0e7cdb1438ff8ee928a2ee"; \
  clone_fixed_commit "https://gerrit.wikimedia.org/r/mediawiki/extensions/CookieConsent" \
                     "/var/www/html/extensions/CookieConsent" \
                     "$COMMIT" "$BRANCH"; \
  BRANCH="main"; \
  COMMIT="30c4dd5da467f9ae9dd52fb3df0dad9712ef5445"; \
  clone_fixed_commit "https://github.com/miraheze/RottenLinks.git" \
                     "/var/www/html/extensions/RottenLinks" \
                     "$COMMIT" "$BRANCH"; \
  # cleanup and rights
  find /var/www/html/extensions -name .git -type d -prune -exec rm -rf {} +; \
  find /var/www/html/skins -name .git -type d -prune -exec rm -rf {} +; \
  chown -R www-data:www-data /var/www/html/extensions; \
  chown -R www-data:www-data /var/www/html/skins

# Supercronic (arch-agnostisch)
ARG TARGETARCH
RUN curl -fsSLo /usr/local/bin/supercronic \
  "https://github.com/aptible/supercronic/releases/download/v0.2.36/supercronic-linux-${TARGETARCH}" \
  && chmod +x /usr/local/bin/supercronic

COPY --chmod=0755 resources/mediawiki/mediawiki-entrypoint.sh /usr/local/bin/mediawiki-entrypoint.sh
COPY --chmod=0755 resources/mediawiki/generate-sitemap.sh /usr/local/bin/generate-sitemap.sh
COPY --chmod=0755 resources/mediawiki/generate-rottenlinks.sh /usr/local/bin/generate-rottenlinks.sh
COPY --chmod=0755 resources/mediawiki/mw-default-setup.sh /usr/local/bin/mw-default-setup.sh
COPY --chmod=0755 resources/mediawiki/generate-elasticindex.sh /usr/local/bin/generate-elasticindex.sh
COPY --chmod=0755 resources/mediawiki/update-cirrussearch-index.sh /usr/local/bin/update-cirrussearch-index.sh

# Get Composer Binary from official image
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

# Install dependencies for CirrusSearch and Elastica
RUN set -eux; \
    if [ -d "/var/www/html/extensions/CirrusSearch" ] && [ -f "/var/www/html/extensions/CirrusSearch/composer.json" ]; then \
      cd /var/www/html/extensions/CirrusSearch; \
      composer install --no-dev; \
    fi; \
    if [ -d "/var/www/html/extensions/Elastica" ] && [ -f "/var/www/html/extensions/Elastica/composer.json" ]; then \
      cd /var/www/html/extensions/Elastica; \
      composer install --no-dev; \
    fi

ENTRYPOINT ["/usr/local/bin/mediawiki-entrypoint.sh"]
CMD ["apache2-foreground"]
