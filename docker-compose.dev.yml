services:
  mediawiki:
    build:
      context: .
      dockerfile: Dockerfile-mediawiki
      args:
        MW_VERSION: "${MW_VERSION:-1.42}"
        MW_EXTENSIONS: ${MW_EXTENSIONS:-}
        MW_SKINS: ${MW_SKINS:-}
    image: mediawiki:${MW_VERSION:-1.42}.1
    depends_on:
      database:
        condition: service_healthy
      memcached:
        condition: service_started
    restart: unless-stopped
    environment:
      MW_PHP_UPLOAD_MAX_FILESIZE: ${MW_PHP_UPLOAD_MAX_FILESIZE:-100M}
      MW_PHP_POST_MAX_SIZE: ${MW_PHP_POST_MAX_SIZE:-100M}
      SITEMAP_CRON: "${SITEMAP_CRON:-20 */12 * * *}"
      SITEMAP_SERVER: "${SITEMAP_SERVER:-https://www.example.com}"
      SITEMAP_FSPATH: "${SITEMAP_FSPATH:-/var/www/html/sitemap}"
      SITEMAP_URLPATH: "${SITEMAP_URLPATH:-sitemap/}"
      SITEMAP_SKIP_REDIRECTS: "${SITEMAP_SKIP_REDIRECTS:-true}"
      SITEMAP_RUN_ON_START: "${SITEMAP_RUN_ON_START:-false}"
      SITEMAP_IDENTIFIER: "${SITEMAP_IDENTIFIER:-wiki}"
      TZ: ${TZ}
    ports:
      - ${MW_HTTP_PORT}:80
    labels:
      - "com.centurylinklabs.watchtower.enable: true"
    volumes:
      - data_mw_images:/var/www/html/images
      # After initial setup, download LocalSettings.php to data/conf directory
      # and uncomment the following line and use compose to restart
      # the mediawiki service
      # - ./data/mediawiki/conf/LocalSettings.php:/var/www/html/LocalSettings.php:ro
      - ./data/mediawiki/conf/robots.txt:/var/www/html/robots.txt:ro
      - ./data/mediawiki/conf/.htaccess:/var/www/html/.htaccess:ro
      - ./data/mediawiki/favicon/:/var/www/html/favicon:ro
      # - ./data/mediawiki/conf/ads.txt:/var/www/html/ads.txt:ro
      # - ./data/mediawiki/favicon/browserconfig.xml:/var/www/html/browserconfig.xml:ro
      # - ./data/mediawiki/conf/loaderio-6e9f1d0addd92099f02be40c8be3a4db.txt:/var/www/html/loaderio-6e9f1d0addd92099f02be40c8be3>
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS 'http://localhost/api.php?action=query&meta=siteinfo&format=json' | grep -q '\"query\"'"]
      # curl -fsS 'http://localhost' | grep -q "${MW_VERSION}"
      interval: 30s
      timeout: 3s
      retries: 10
    networks:
      app-nw:
      backend-nw:
        aliases:
          - wiki

  database:
    image: mariadb:11.8
    volumes:
      - data_mw_db:/var/lib/mysql
    restart: unless-stopped
    environment:
      MARIADB_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD:-R00tPassword}
      TZ: ${TZ}
    labels:
      - "com.centurylinklabs.watchtower.enable: true"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mariadb -u root -p$${MARIADB_ROOT_PASSWORD} -e 'SELECT 1'",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      backend-nw:
        aliases:
          - db

  memcached:
    image: memcached:alpine
    restart: unless-stopped
    command: ["-m", "${MEMCACHE_CACHE:-16M}"]
    environment:
      - TZ=${TZ}
    labels:
      - "com.centurylinklabs.watchtower.enable: true"
    networks:
      backend-nw:
        aliases:
          - wikimemcached

  memcachephp:
    build:
      context: .
      dockerfile: Dockerfile-memcachephp
    image: memcachephp:latest
    restart: unless-stopped
    depends_on:
      - memcached
    environment:
      TZ: ${TZ}
      MEMCACHEPHP_SERVERS: ${MEMCACHEPHP_SERVERS:-memcached:11211}
      MEMCACHEPHP_ADMIN_USER: ${MEMCACHEPHP_ADMIN_USER:-admin}
      MEMCACHEPHP_ADMIN_PASS: ${MEMCACHEPHP_ADMIN_PASS:-supersecret}
      MEMCACHEPHP_DATE_FORMAT: ${MEMCACHEPHP_DATE_FORMAT:-Y-m-d H:i:s}
      MEMCACHEPHP_GRAPH_SIZE: ${MEMCACHEPHP_GRAPH_SIZE:-200}
      MEMCACHEPHP_MAX_ITEM_DUMP: ${MEMCACHEPHP_MAX_ITEM_DUMP:-50}
    labels:
      - "com.centurylinklabs.watchtower.enable: true"
    ports:
      - ${MEMCACHEPHP_HTTP_PORT}:80
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -fsS -u \"$MEMCACHEPHP_ADMIN_USER:$MEMCACHEPHP_ADMIN_PASS\" http://localhost/ | grep -Eiq 'memcache|server stats|slabs'"
        ]
      interval: 10s
      timeout: 5s
      retries: 5

    networks:
      app-nw:
      backend-nw:

volumes:
  data_mw_db:
  data_mw_images:

networks:
  app-nw:
    internal: false
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: app-${PROJECT_NAME:-mw}
  backend-nw:
    internal: true
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: be-${PROJECT_NAME:-mw}
