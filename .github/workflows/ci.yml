name: CI (lint, build, scan, e2e)

on:
  pull_request:
  push:
    branches: [main]

permissions:
  contents: read
  security-events: write  # für Trivy SARIF Upload

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dockerfile:
          - Dockerfile-mediawiki
          - Dockerfile-memcachephp
    steps:
      - uses: actions/checkout@v4

      - name: Hadolint
        uses: hadolint/hadolint-action@v3.3.0
        with:
          dockerfile: ${{ matrix.dockerfile }}
          config: .hadolint.yaml
          failure-threshold: warning

      - name: ShellCheck
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          scandir: .
          ignore_names: "*.log\n*.sql\n"

      - name: Yamllint
        uses: ibiqlik/action-yamllint@v3
        with:
          config_file: .yamllint.yaml
          file_or_dir: ".\n"
          strict: true

  build_and_scan:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        image:
          - {name: "mediawiki", dockerfile: "Dockerfile-mediawiki", context: "."}
          - {name: "memcachephp", dockerfile: "Dockerfile-memcachephp", context: "."}
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-${{ matrix.image.name }}
          # Tags: PR bekommt pr-XYZ und sha; main bekommt main und sha
          tags: |
            type=ref,event=pr
            type=sha
            type=raw,value=main,enable={{is_default_branch}}

      - name: Build (amd64, für Trivy "load")
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.image.context }}
          file: ${{ matrix.image.dockerfile }}
          platforms: linux/amd64
          load: true
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Trivy scan
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: image
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: sarif
          output: trivy-${{ matrix.image.name }}.sarif
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'
          ignore-unfixed: true

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-${{ matrix.image.name }}.sarif

  e2e:
    runs-on: ubuntu-latest
    needs: build_and_scan
    steps:
      - uses: actions/checkout@v4

      - name: Write CI .env (override)
        run: |
          cat > .env.ci <<'EOF'
          TZ=Europe/Berlin
          MW_HTTP_PORT=8080
          MARIADB_ROOT_PASSWORD=ciRootPassw0rd!
          MEMCACHEPHP_HTTP_PORT=8097
          MEMCACHEPHP_ADMIN_USER=admin
          MEMCACHEPHP_ADMIN_PASS=supersecret
          MEMCACHEPHP_SERVERS=memcached:11211
          EOF

      - name: Compose up (detached, build)
        run: |
          docker compose --env-file .env.ci up -d --build
          # Warten bis MediaWiki erreichbar (max ~90s)
          for i in $(seq 1 30); do
            if curl -fsS 'http://localhost:8080/api.php?action=query&meta=siteinfo&format=json' | grep -q '"query"'; then
              echo "API OK"; exit 0
            fi
            sleep 3
          done
          echo "MW API nicht erreichbar"; docker compose logs --no-color > compose-logs.txt || true
          exit 1
          for i in $(seq 1 30); do
            if curl -fsS http://${MEMCACHEPHP_ADMIN_USER}:${MEMCACHEPHP_ADMIN_PASS}@localhost:8097/
              | grep -Eiq 'memcache|server stats|slabs'; then
              echo "MEMCACHEPHP OK"; exit 0
            fi
            sleep 3
          done
          echo "MemcachePHP nicht erreichbar"; docker compose logs --no-color > compose-logs.txt || true
          exit 1

      - name: Show logs on failure
        if: failure()
        run: |
          sed -n '1,400p' compose-logs.txt || true
          docker compose ps || true

      - name: Tear down
        if: always()
        run: docker compose down -v
