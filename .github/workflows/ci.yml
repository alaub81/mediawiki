name: CI (lint, build, scan, e2e)

on:
  pull_request:
  push:
    branches: [main]

permissions:
  contents: read
  security-events: write  # für Trivy SARIF Upload

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dockerfile:
          - Dockerfile-mediawiki
          - Dockerfile-memcachephp
    steps:
      - uses: actions/checkout@v4

      - name: Hadolint
        uses: hadolint/hadolint-action@v3.3.0
        with:
          dockerfile: ${{ matrix.dockerfile }}
          config: .hadolint.yaml
          failure-threshold: warning

      - name: ShellCheck
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          scandir: .
          ignore_names: "*.log\n*.sql\n"

      - name: Yamllint
        uses: ibiqlik/action-yamllint@v3
        with:
          config_file: .yamllint.yaml
          file_or_dir: ".\n"
          strict: true

  build_and_scan:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        image:
          - {name: "mediawiki", dockerfile: "Dockerfile-mediawiki", context: "."}
          - {name: "memcachephp", dockerfile: "Dockerfile-memcachephp", context: "."}
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.image.name }}
          # Tags: PR bekommt pr-XYZ und sha; main bekommt main und sha
          tags: |
            type=ref,event=pr
            type=sha
            type=raw,value=main,enable={{is_default_branch}}

      - name: Build (amd64, für Trivy "load")
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.image.context }}
          file: ${{ matrix.image.dockerfile }}
          platforms: linux/amd64
          load: true
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Trivy scan
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: image
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: sarif
          output: trivy-${{ matrix.image.name }}.sarif
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'
          ignore-unfixed: true

      - name: Upload SARIF
        if: ${{ github.event.repository.private == false }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-${{ matrix.image.name }}.sarif

  e2e:
    runs-on: ubuntu-latest
    needs: build_and_scan
    steps:
      - uses: actions/checkout@v4

      - name: Write CI .env (override)
        run: |
          cat > .env.ci <<'EOF'
          TZ=Europe/Berlin
          MW_HTTP_PORT=8080

          # Database
          MARIADB_ROOT_PASSWORD=ciRootPassw0rd
          MW_DB_HOST=database
          MW_DB_PORT=3306
          MW_DB_NAME=wikidb
          MW_DB_USER=wikiuser
          MW_DB_PASS=w1k1pass
          MW_DB_ADMIN_USER=root

          # MediaWiki
          MW_SITENAME="Wiki CI"
          MW_LANG=de
          MW_ADMIN_USER=Admin
          MW_ADMIN_PASS=AdminPass123
          MW_EXTENSIONS="RottenLinks, Lockdown, Description2, RelatedArticles, MobileFrontend, WikiCategoryTagCloud"
          SITEMAP_IDENTIFIER=wiki

          # MemcachePHP
          MEMCACHEPHP_HTTP_PORT=8097
          MEMCACHEPHP_ADMIN_USER=admin
          MEMCACHEPHP_ADMIN_PASS=supersecret
          MEMCACHEPHP_SERVERS=memcached:11211
          EOF

      - name: Export CI env to shell (for compose variable substitution)
        run: |
          set -a
          . ./.env.ci
          set +a

      - name: Compose up
        run: docker compose --env-file .env.ci up -d --build

      - name: Wait for database
        run: |
          for i in $(seq 1 60); do
            if docker compose exec -T database sh -lc 'mysqladmin ping -h 127.0.0.1 -u root -p"$MARIADB_ROOT_PASSWORD" --silent'; then
              echo "DB is up"; break
            fi
            sleep 2
          done

      - name: Ensure MediaWiki is installed (install or update)
        run: |
          docker compose exec -T -u www-data mediawiki sh -lc '
            set -e
            cd /var/www/html

            # Wrapper/Fallback bestimmen
            run="php maintenance/run.php"

            if [ -f LocalSettings.php ]; then
              echo "[e2e] LocalSettings.php exists → running update.php"
              $run update --quick --no-interactive
            else
              echo "[e2e] No LocalSettings.php → running install.php"

              # Installation
              $run install \
                --confpath /var/www/html \
                --dbtype mysql \
                --dbserver  "${MW_DB_HOST:-database}:${MW_DB_PORT:-3306}" \
                --dbname    "${MW_DB_NAME:-wikidb}" \
                --dbuser    "${MW_DB_USER:-wikiuser}" \
                --dbpass    "${MW_DB_PASS:-w1k1pass}" \
                --installdbuser "${MW_DB_ADMIN_USER:-root}" \
                --installdbpass "${MARIADB_ROOT_PASSWORD:-ciRootPassw0rd}" \
                --lang      "${MW_LANG:-de}" \
                --server    http://localhost:${MW_HTTP_PORT:-8080} \
                --scriptpath "" \
                --pass      "${MW_ADMIN_PASS:-AdminPass123}" \
                --extensions "RottenLinks,Lockdown,Description2,RelatedArticles,MobileFrontend,WikiCategoryTagCloud" \
                # --extensions
                #   "${MW_EXTENSIONS:-RottenLinks, Lockdown, Description2, RelatedArticles, MobileFrontend, WikiCategoryTagCloud}" \
                "${MW_SITENAME:-Wiki CI}" \
                "${MW_ADMIN_USER:-Admin}"
            fi
          '

      - name: generate sitemap
        run: |
          docker compose exec -T mediawiki sh -lc '
            set -e
            /usr/local/bin/generate-sitemap.sh
          '

      - name: E2E check (API)
        run: |
          for i in $(seq 1 30); do
            if curl -fsS "http://localhost:${MW_HTTP_PORT:-8080}/api.php?action=query&meta=siteinfo&format=json" | grep -q '"query"'; then
              echo "MediaWiki API OK"; exit 0
            fi
            sleep 3
          done
          echo "MediaWiki API not reachable"
          docker compose logs --no-color > compose-logs.txt || true
          exit 1

      - name: E2E check — sitemap redirect and target
        shell: bash
        run: |
          # Werte aus .env (falls vorhanden) einlesen, sonst Defaults
          if [ -f .env ]; then set -a; . ./.env; set +a; fi
          : "${MW_HTTP_PORT:=8080}"
          : "${SITEMAP_IDENTIFIER:=wiki}"
          BASE="http://localhost:${MW_HTTP_PORT}"

          echo "[e2e] Expect: ${BASE}/sitemap.xml -> /sitemap/sitemap-index-${SITEMAP_IDENTIFIER}.xml and target 200"

          ok=0
          for i in $(seq 1 40); do
            # 1) Header von /sitemap.xml holen
            headers="$(curl -fsSI "${BASE}/sitemap.xml" || true)"

            # a) 301?
            echo "$headers" | grep -qiE '^HTTP/.* 301 ' || { sleep 3; continue; }

            # b) Location extrahieren
            loc="$(echo "$headers" | awk 'BEGIN{IGNORECASE=1} /^Location:/{print $2}' | tr -d '\r')"
            [ -n "$loc" ] || { sleep 3; continue; }

            # c) Pfad im Location korrekt?
            echo "$loc" | grep -q "/sitemap/sitemap-index-${SITEMAP_IDENTIFIER}\.xml$" || { sleep 3; continue; }

            # 2) Ziel-Status prüfen
            code="$(curl -fsSI "$loc" | awk 'NR==1{print $2}')"
            if [ "$code" = "200" ]; then
              echo "[e2e] OK: redirect to ${loc} and target 200"
              ok=1
              break
            fi
            sleep 3
          done

          if [ "$ok" != "1" ]; then
            echo "::error::Sitemap redirect/target check failed"
            echo "[debug] HEAD /sitemap.xml"
            curl -v -sI "${BASE}/sitemap.xml" || true
            echo "[debug] Expected suffix: /sitemap/sitemap-index-${SITEMAP_IDENTIFIER}.xml"
            echo "[debug] Apache enabled conf (first 60 lines):"
            docker compose exec -T mediawiki sh -lc 'sed -n "1,60p" /etc/apache2/conf-enabled/*.conf 2>/dev/null || true'
            echo "[debug] List sitemap dir:"
            docker compose exec -T mediawiki sh -lc 'ls -l /var/www/html/sitemap || true'
            exit 1
          fi

      # - name: E2E — short URLs rewrite
      #   shell: bash
      #   run: |
      #     [ -f .env.ci ] && { set -a; . ./.env.ci; set +a; }
      #     : "${MW_HTTP_PORT:=8080}"
      #     BASE="http://localhost:${MW_HTTP_PORT}"
      #     for i in $(seq 1 30); do
      #       H="$(curl -fsSI "${BASE}/index.php/Special:Version" || true)"
      #       echo "$H" | grep -qiE '^HTTP/.* 301 ' || { sleep 2; continue; }
      #       echo "$H" | grep -qiE '^Location: .*/wiki/Special:Version\s*$' && { echo "Short URLs OK"; exit 0; }
      #       sleep 2
      #     done
      #     echo "::error::Short URL redirect failed"
      #     curl -v -sI "${BASE}/index.php/Special:Version" || true
      #     exit 1

      - name: E2E — X-Content-Type-Options on /images
        shell: bash
        run: |
          [ -f .env ] && { set -a; . ./.env; set +a; }
          : "${MW_HTTP_PORT:=8080}"
          BASE="http://localhost:${MW_HTTP_PORT}"
          docker compose exec -T -u www-data mediawiki sh -lc 'printf test > /var/www/html/images/ci.txt'
          curl -fsSI "${BASE}/images/ci.txt" | grep -qi '^X-Content-Type-Options: *nosniff' \
            && echo "nosniff OK" \
            || { echo "::error::nosniff header missing on /images/ci.txt"; exit 1; }
          docker compose exec -T -u www-data mediawiki rm -f /var/www/html/images/ci.txt

      - name: E2E — extensions loaded (optional)
        shell: bash
        run: |
          [ -f .env ] && { set -a; . ./.env; set +a; }
          : "${MW_HTTP_PORT:=8080}"
          : "${E2E_EXPECT_EXTENSIONS:=}"   # leer = nur auflisten
          JSON="$(curl -fsS "http://localhost:${MW_HTTP_PORT}/api.php?action=query&meta=siteinfo&siprop=extensions&format=json")"
          if [ -z "$E2E_EXPECT_EXTENSIONS" ]; then
            echo "$JSON" | grep -o '"name":"[^"]*"' | sed 's/.*:"//;s/"$//' | sort -u | sed 's/^/ - /'
            exit 0
          fi
          fail=0
          for ext in $E2E_EXPECT_EXTENSIONS; do
            echo "$JSON" | grep -q "\"name\":\"$ext\"" \
              && echo "✓ $ext" \
              || { echo "::error::Extension not loaded: $ext"; fail=1; }
          done
          exit $fail

      - name: E2E — memcached reachable from mediawiki
        shell: bash
        run: |
          docker compose exec -T mediawiki bash -lc '
            set -e
            exec 3<>/dev/tcp/memcached/11211
            printf "version\r\n" >&3
            read -r LINE <&3
            echo "$LINE" | grep -q "^VERSION" && echo "memcached OK" || { echo "$LINE"; exit 1; }
            exec 3>&- 3<&-
          '

      - name: E2E — siteinfo sanity
        shell: bash
        run: |
          [ -f .env ] && { set -a; . ./.env; set +a; }
          : "${MW_HTTP_PORT:=8080}"
          OUT="$(curl -fsS "http://localhost:${MW_HTTP_PORT}/api.php?action=query&meta=siteinfo&format=json")"
          echo "$OUT" | grep -q '"server":"' || { echo "::error::no server in siteinfo"; exit 1; }
          [ -n "${MW_SITENAME:-}" ] && echo "$OUT" | grep -q "\"sitename\":\"${MW_SITENAME}\"" || true

      - name: E2E — sitemap index is recent
        shell: bash
        run: |
          [ -f .env ] && { set -a; . ./.env; set +a; }
          : "${SITEMAP_IDENTIFIER:=wiki}"
          docker compose exec -T mediawiki sh -lc '
            f="/var/www/html/sitemap/sitemap-index-'"$SITEMAP_IDENTIFIER"'.xml"
            [ -s "$f" ] || { echo "::error::missing sitemap index: $f"; exit 1; }
            now=$(date +%s); mt=$(stat -c %Y "$f" 2>/dev/null || stat -f %m "$f")
            age=$(( now - mt ))
            echo "sitemap age: ${age}s"
            [ "$age" -le 600 ] || { echo "::warning::sitemap older than 10 minutes"; }
          '

      - name: E2E — memcachephp UI
        shell: bash
        run: |
          # .env einlesen (falls vorhanden)
          if [ -f .env ]; then set -a; . ./.env; set +a; fi
          : "${MEMCACHEPHP_HTTP_PORT:=8097}"
          : "${MEMCACHEPHP_ADMIN_USER:=admin}"
          : "${MEMCACHEPHP_ADMIN_PASS:=supersecret}"

          BASE="http://localhost:${MEMCACHEPHP_HTTP_PORT}/"

          echo "[e2e] Checking ${BASE} with basic auth user=${MEMCACHEPHP_ADMIN_USER}"

          for i in $(seq 1 30); do
            if curl -fsS -u "${MEMCACHEPHP_ADMIN_USER}:${MEMCACHEPHP_ADMIN_PASS}" "${BASE}" \
              | grep -Eiq 'memcache|server stats|slabs'; then
              echo "MEMCACHEPHP OK"
              exit 0
            fi
            sleep 3
          done

      - name: Show logs on failure
        if: failure()
        run: |
          sed -n '1,400p' compose-logs.txt || true
          docker compose ps || true

      - name: Tear down
        if: always()
        run: docker compose down -v
